#!/usr/bin/env ruby
require 'gli'
require './lib/srdm'

include GLI::App

program_desc 'A Springboard Retail data migration tool'
version SRDM::VERSION
subcommand_option_handling :normal

flag [:c,:config], desc: 'YAML config file containing credentials for the current migrations', required: true

pre do |global_options,command,options,args|
  exit_now!("Config file not found #{global_options[:config]}") unless File.exist?(global_options[:config])
  SRDM.load_config_file!(global_options[:config])
end

desc 'Import'
long_desc 'Imports various resources into Springboard Retail account'
command [:import, :importer] do |c|
  c.desc 'Import inventory qtys'
  c.long_desc "Imports a multi-location inventory qty import file into Springboard Retail.\n\n" \
              'The file must be prepared following the docs and then passed to this command.'
  c.command [:inventory_qtys, :inventory_qty, :counts, :inventory, :qtys] do |sc|
    sc.switch [:p, :resume_physical_counts], desc: 'Adds qtys to existing physical count in progress if available'
    sc.switch [:o, :leave_count_open], desc: 'Leaves physical count open for additional modifications'
    sc.flag [:r, :reason_code], desc: 'Set the reason code to use on the import', default_value: 'Initial Import'
    sc.flag [:f, :file], desc: 'Set the import file', required: true
    sc.action do |global_options,options,args|
      SRDM::Importer.inventory_qtys(options)
    end
  end

  c.desc 'Import sales history'
  c.long_desc "Imports sales history into Springboard Retail.\n\n" \
              'The file must be prepared following the docs and then passed to this command.'
  c.command [:sales_history, :sales, :tickets] do |sc|
    sc.switch [:t, :skip_ticket_download], desc: 'Skips downloading tickets assuming all tickets on import file are new'
    sc.switch [:r, :refresh_cache], desc: 'Forces a re-download of cached resources'
    sc.switch [:p, :skip_prompt], desc: 'Automatically answers Yes to all prompts allowing for a headless run'
    sc.flag [:f, :file], desc: 'Set the import file', required: true
    sc.flag(
      [:s, :import_start_time],
      desc: 'Set import start time (1-24 hour only using computers time)',
      required: false,
      type: Integer,
      must_match: /\A\d{1,2}\z/
    )
    sc.flag(
      [:e, :import_end_time],
      desc: 'Set import end time (1-24 hour only using computers time)',
      required: false,
      type: Integer,
      must_match: /\A\d{1,2}\z/
    )
    sc.action do |global_options,options,args|
      SRDM::Importer.sales_history(options)
    end
  end

  c.desc 'Attach store credit gift cards to customers'
  c.long_desc "Matches gift cards in Springboard Retail to customers and adds card # to custom field.\n\n" \
              "The store credits must have been imported following the recommended configuration in the docs.\n\n" \
              'It will default to adding the card # in the field "Store Credit #", or you can pass a field.'
  c.command [:attach_store_credits, :credits, :store_credits] do |sc|
    sc.flag [:f, :field_name], desc: 'Set the store credit field name', default_value: 'Store Credit #'
    sc.flag [:s, :system], desc: 'Specify source system for special consideration (ex: Lightspeed)'
    sc.action do |global_options,options,args|
      SRDM::Importer.attach_store_credits(options)
    end
  end
end

exit run(ARGV)
